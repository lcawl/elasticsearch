[role="xpack"]
[[configuring-saml-realm]]
=== Configuring a SAML realm

The {stack} supports Security Assertion Markup Language Single Sign On (SAML SSO) 
into {kib} with {es} as a backend service. In particular, the {stack} supports 
the SAML 2.0 Web Browser SSO and the SAML 2.0 Single Logout profiles. It can 
integrate with any identity provider (IdP) that supports at least the SAML 2.0 
Web Browser SSO Profile. 

In SAML terminology, the {stack} is operating as a _service provider_. For more 
information, see {stack-ov}/saml-realm.html[SAML authentication]. 

[NOTE]
--

* If you configure a SAML realm for use in {kib}, you should also configure
another realm, such as the native realm in your authentication chain.
* These instructions assume that you have an existing identity provider.
--

To enable SAML authentication in {es} and add the {stack} as a service provider:

. Enable SSL/TLS for HTTP. 
+
--
If your {es} cluster is operating in production mode, then you must
configure the HTTP interface to use SSL/TLS before you can enable SAML
authentication.

See {ref}/configuring-tls.html#tls-http[Encrypting HTTP Client Communications].
--

. Enable the Token Service. 
+
--
The {es} SAML implementation makes use of the {es} Token Service.  This service
is automatically enabled if you configure TLS on the HTTP interface. You can 
explicitly enable it by including the following setting in your 
`elasticsearch.yml` file:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.token.enabled: true
------------------------------------------------------------
--

. Generate a SAML metadata file. 
+
--
The {stack} uses a standard SAML metadata document in XML format, which defines 
the capabilities and features of your identity provider. You should be able to
download or generate such a document within your IdP administration interface. 

Most IdPs will provide an appropriate metadata file with all the features that
the {stack} requires. For completeness sake, the minimum requirements that the 
{stack} has for the IdP's metadata are:

- An `<EntityDescriptor>` with an `entityID`, which you will use in the 
`elasticsearch.yml` configuration file when you set up the SAML realm.
- An `<IDPSSODescriptor>` that supports the SAML 2.0 protocol
  (`urn:oasis:names:tc:SAML:2.0:protocol`).
- At least one `<KeyDescriptor>` that is configured for signing (that is, it
  has `use="signing"` or leaves the `use` unspecified)
- A `<SingleSignOnService>` with binding of HTTP-Redirect
  (`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`)
- If you wish to support single logout, a `<SingleLogoutService>`
  with binding of HTTP-Redirect
  (`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`)

The {stack} requires that all messages from the IdP are signed.
For authentication `<Response>` messages, the signature may be applied to either
the response itself, or to the individual assertions.
For `<LogoutRequest>` messages, the message itself must be signed, and the
signature should be provided as a URL parameter, as required by the HTTP-Redirect
binding.
--

.. Download the IdP metadata document and store it within the `config` directory 
on each {es} node. For example, store it as `config/saml/idp-metadata.xml`.

.. Get the identifier for your identity provider. 
+
--
The IdP will have been assigned an identifier (_EntityID_ in SAML terminology),
which is most commonly expressed in Uniform Resource Identifier (URI) form. Your 
admin interface might tell you what this is or you might need to read the 
metadata document to find it. Look for the `entityID` attribute on the
`EntityDescriptor` element.
--

. Create one or more SAML realms.
+
--
SAML authentication is enabled by configuring a SAML realm within the
authentication chain for {es}.

This realm has a few mandatory settings, and a number of optional settings.
The available settings are described in detail in the
<<ref-saml-settings>>. These steps walk you through the most common settings.

Add the following settings to your `elasticsearch.yml` configuration file:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.saml1: <1>
  type: saml <2>
  order: 2 <3>
  idp.metadata.path: saml/idp-metadata.xml <4>
  idp.entity_id: "https://sso.example.com/" <5>
  sp.entity_id:  "https://kibana.example.com/" <6>
  sp.acs: "https://kibana.example.com/api/security/v1/saml" <7>
  sp.logout: "https://kibana.example.com/logout" <8>
  attributes.principal: "urn:oid:0.9.2342.19200300.100.1.1"
  attributes.groups: "urn:oid:1.3.6.1.4.1.5923.1.5.1."
------------------------------------------------------------
<1> This setting defines a new authentication realm named "saml1". For an 
introduction to realms, see {stack-ov}/realms.html[Realms]. 
<2> The `type` must be `saml`.
<3>  You should define a unique order on each realm in your authentication chain.
It is recommended that the SAML realm be at the bottom of your authentication 
chain (that is, it has the _highest_ order).
<4> This is the path to the metadata file that you saved for your identity provider.
The path that you enter here is relative to your `config/` directory. {security} 
automatically monitors this file for changes and reloads the configuration 
whenever it is updated.
<5> This is the identifier (SAML EntityID) that your IdP uses. It should match 
the `entityID` attribute within the metadata file.
<6> This is a unique identifier for your {kib} instance, expressed as a URI.
You will use this value when you add {kib} as a service provider within your IdP.
We recommend that you use the base URL for your {kib} instance as the entity ID.
<7> The Assertion Consumer Service (ACS) endpoint is the URL within {kib} that 
accepts authentication messages from the IdP. This ACS endpoint supports the 
SAML HTTP-POST binding only. It must be a URL that is accessible from the web 
browser of the user who is attempting to login to {kib}; it does not need to be 
directly accessible by {es} or the IdP. The correct value can vary depending on 
how you have installed {kib} and whether there are any proxies involved, but it 
is typically +$\{kibana-url}/api/security/v1/saml+ where _$\{kibana-url}_ is the 
base URL for your {kib} instance.
<8> This is the URL within {kib} that accepts logout messages from the IdP.
Like the `sp.acs` URL, it must be accessible from the web browser, but does
not need to be directly accessible by {es} or the IdP. The correct value can 
vary depending on how you have installed {kib} and whether there are any
proxies involved, but it will typically be +$\{kibana-url}/logout+ where
_$\{kibana-url}_ is the base URL for your {kib} instance.

IMPORTANT: SAML is used when authenticating via {kib}, but it is not an
effective means of authenticating directly to the {es} REST API. For this reason
we recommend that you include at least one additional realm such as the
native realm in your authentication chain for use by API clients.
--

. Add attribute mappings. 
+
--
[[saml-attribute-mapping]]
When a user connects to {kib} through the identity provider, the IdP supplies a 
SAML assertion that includes attributes for the user. You can configure the SAML 
realm to map these attributes to properties on the authenticated user. For more 
information, see {stack-ov}/saml-realm.html#saml-attributes[SAML attributes]. 

The recommended steps for configuring these SAML attributes are as follows:
--
.. Consult your IdP to see what user attributes it can provide. This varies 
greatly between providers, but you should be able to obtain a list from the 
documentation or from your local admin.

.. Read through the list of <<ref-saml-attribute-settings,user properties>> that 
{es} supports and decide which of them are useful to you and can be provided by 
your IdP. At a minimum, the `principal` attribute is required. The `groups` 
attribute is recommended.

.. Configure your IdP to release those attributes to your {kib} SAML service
provider.
+
--
This process varies by provider - some provide a user interface for this, while 
others might require that you edit configuration files. Usually the IdP (or your 
local administrator) have suggestions about what URI to use for each attribute. 
You can simply accept those suggestions, as the {es} service is entirely 
configurable and does not require that any specific URIs are used.
--

.. Configure the SAML realm to associate the {es} user properties to the URIs 
that you configured in your IdP. 
+
--
For example, add the following settings to the `elasticsearch.yml` configuration 
file:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.saml1: <1>
  ...
  attributes.principal: "urn:oid:0.9.2342.19200300.100.1.1"
  attributes.groups: "urn:oid:1.3.6.1.4.1.5923.1.5.1."
------------------------------------------------------------

In general, {es} expects that the configured value for an attribute is a URI 
such as `urn:oid:0.9.2342.19200300.100.1.1`. However, there are some extra names 
that you can use: `nameid`, `nameid:persistent`, and `friendlyName`. The 
following example configures a realm to use a persistent nameid for the 
principal and the attribute with the friendlyName "roles" for the user's groups:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.saml1:
  ...
  attributes.principal: "nameid:persistent"
  attributes.groups: "roles"
------------------------------------------------------------

For more information, see <<ref-saml-attribute-settings>> and 
<<saml-special-attributes>>.

There are some occasions where the IdP's attribute might contain more information
than you wish to use within {es}. A common example of this is one where the
IdP works exclusively with email addresses, but you would like the user's
`principal` to use the _local-name_ part of the email address.
For example, if their email address was `james.wong@staff.example.com`, then you
would like their principal to simply be `james.wong`.

This can be achieved using the `attribute_patterns` setting in the {es}
realm, as demonstrated in the following realm configuration:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.saml1:
  ...
  attributes.principal: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
  attribute_patterns.principal: "^([^@]+)@staff\\.example\\.com$"
------------------------------------------------------------

In this case, the user's `principal` is mapped from an email attribute, but a
regular expression is applied to the value before it is assigned to the user.
If the regular expression matches, then the result of the first group is used as
the effective value. If the regular expression does not match, the attribute
mapping fails.

In this example, the email address must belong to the `staff.example.com` domain
and then the local-part (anything before the `@`) is used as the principal.
Any users who try to login using a different email domain fail because the
regular expression does not match against their email address and thus their
principal attribute (which is mandatory) is not populated.

IMPORTANT: Small mistakes in these regular expressions can have significant
security consequences. For example, if you accidentally left off the trailing
`$` from the example, then it would match any email address where the domain 
starts with `staff.example.com`. This scenario would accept an email address 
such as `admin@staff.example.com.attacker.net`. It is important that you make 
sure your regular expressions are as precise as possible so that you do not 
inadvertently open an avenue for user impersonation attacks.
--

. Configure role mappings.
+
--
When a user authenticates using SAML, they are identified to the {stack},
but this does not automatically grant them access to perform any actions or
access any data.

Your SAML users cannot do anything until they are mapped to {security}
roles. This mapping is performed through the 
<<security-api-role-mapping,role-mapping API>>. 

This is an example of a simple role mapping that grants the `kibana_user` role
to any user who authenticates against the `saml1` realm:

[source,js]
--------------------------------------------------
PUT /_xpack/security/role_mapping/saml-kibana
{
  "roles": [ "kibana_user" ],
  "enabled": true,
  "rules": {
    "field": { "realm.name": "saml1" }
  }
}
--------------------------------------------------
// CONSOLE
// TEST

The attributes that are mapped via the realm configuration are used to process
role mapping rules and these rules determine which roles a user is granted.

The user fields that are provided to the role mapping are derived from the SAML 
attributes as follows:

- `username`: The `principal` attribute
- `dn`: The `dn` attribute
- `groups`: The `groups` attribute
- `metadata`: See {stack-ov}/saml-user-metadata.html[User metadata]

For more information, see <<security-api-role-mapping>> and 
{stack-ov}/mapping-roles.html[Mapping users and groups to roles]. 

If your IdP has the ability to provide groups or roles to service providers,
then you should map this SAML attribute to the `attributes.groups` setting in
the {es} realm, and then make use of it in a role mapping as per the example
below.

This mapping grants the {es} `finance_data` role, to any users who authenticate
via the `saml1` realm with the `finance-team` group.

[source,js]
--------------------------------------------------
PUT /_xpack/security/role_mapping/saml-finance
{
  "roles": [ "finance_data" ],
  "enabled": true,
  "rules": { "all": [
        { "field": { "realm.name": "saml1" } },
        { "field": { "groups": "finance-team" } }
  ] }
}
--------------------------------------------------
// CONSOLE
// TEST
--
