[role="xpack"]
[[configuring-saml-realm]]
=== Configuring a SAML realm

The {stack} supports user authentication using SAML Single Sign On (SSO).
{security} provides this support using the Web Browser SSO profile of the SAML
2.0 protocol. For more information, see 
{stack-ov}/saml-realm.html[SAML authentication]. 

TIP: If you configure a SAML realm for use in {kib}, you should also configure
another realm, such as the native realm in your authentication chain.

In order to simplify the process of configuring SAML authentication within the
{es}, there is a step-by-step guide to
{stack-ov}/saml-guide.html[Configuring SAML SSO on the {es}>>.

To enable SAML authentication in {es}:

. Enable SSL/TLS for HTTP. 
+
--
If your {es} cluster is operating in production mode, then you must
configure the HTTP interface to use SSL/TLS before you can enable SAML
authentication.

For more information, see
{ref}/configuring-tls.html#tls-http[Encrypting HTTP Client Communications].
--

. Enable the Token Service. 
+
--
The {es} SAML implementation makes use of the {es} Token Service.  This service
is automatically enabled if you configure TLS on the HTTP interface. You can 
explicitly enable it by including the following setting in your 
`elasticsearch.yml` file:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.token.enabled: true
------------------------------------------------------------
--

. Create one or more SAML realms
+
--
SAML authentication is enabled by configuring a SAML realm within the
authentication chain for {es}.

This realm has a few mandatory settings, and a number of optional settings.
The available settings are described in detail in the
<<saml-settings, SAML realm documentation>>, this guide will walk you through
the most common settings.

Create a realm by adding the following to your `elasticsearch.yml`
configuration file. Each configuration value is explained below.

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.saml1:
  type: saml
  order: 2
  idp.metadata.path: saml/idp-metadata.xml
  idp.entity_id: "https://sso.example.com/"
  sp.entity_id:  "https://kibana.example.com/"
  sp.acs: "https://kibana.example.com/api/security/v1/saml"
  sp.logout: "https://kibana.example.com/logout"
  attributes.principal: "urn:oid:0.9.2342.19200300.100.1.1"
  attributes.groups: "urn:oid:1.3.6.1.4.1.5923.1.5.1."
------------------------------------------------------------

IMPORTANT: SAML is used when authenticating via {kib}, but it is not an
effective means of authenticating directly to the {es} REST API. For this reason
we recommend that you include at least one additional realm such as the
<<native-realm, native realm>> in your authentication chain for use by API
clients.

The configuration values used in the example above are:

xpack.security.authc.realms.saml::
    This defines a new authentication realm named "saml1".
    See <<how-authc-works>> for more explanation of realms.

type:: The `type` must be `saml`
order::
    You should define a unique order on each realm in your authentication chain.
    It is recommended that the SAML realm be at the bottom of your authentication
    chain (that is, that it has the _highest_ order).

idp.metadata.path::
    This is the path to the metadata file that you saved for your Identity Provider.
    The path that you enter here is relative to your `config/` directory.
    {security} will automatically monitor this file for changes and will
    reload the configuration whenever it is updated.

idp.entity_id::
    This is the identifier (SAML EntityID) that your IdP uses.
    It should match the `entityID` attribute within the metadata file.

sp.entity_id::
    This is a unique identifier for your {kib} instance, expressed as a URI.
    You will use this value when you add {kib} as a service provider within your IdP.
    We recommend that you use the base URL for your {kib} instance as the entity ID.

sp.acs::
    The _Assertion Consumer Service_ (ACS) endpoint is the URL within {kib} that accepts
    authentication messages from the IdP.
    This ACS endpoint supports the SAML HTTP-POST binding only.
    It must be a URL that is accessible from the web browser of the user who is
    attempting to login to {kib}, it does not need to be directly accessible by {es}
    or the IdP.
    The correct value may vary depending on how you have installed {kib} and
    whether there are any proxies involved, but it will typically be
    +$\{kibana-url}/api/security/v1/saml+ where _$\{kibana-url}_ is the base URL for
    your {kib} instance.

sp.logout::
    This is the URL within {kib} that accepts logout messages from the IdP.
    Like the `sp.acs` URL, it must be accessible from the web browser, but does
    not need to be directly accessible by {es} or the IdP. The correct value may
    vary depending on how you have installed {kib} and whether there are any
    proxies involved, but it will typically be +$\{kibana-url}/logout+ where
    _$\{kibana-url}_ is the base URL for your {kib} instance.

attribute.principal:: See <<saml-attribute-mapping>>.
attribute.groups:: See <<saml-attribute-mapping>>.

[[saml-attribute-mapping]]
==== Attribute Mapping

When a user connects to {kib} through your Identity Provider, the Identity
Provider will supply a SAML Assertion about the user. The assertion will contain
an _Authentication Statement_ indicating that the user has successfully
authenticated to the IdP and one ore more _Attribute Statements_ that will
include _Attributes_ for the user.

These attributes may include such things as:

- the user's username
- the user's email address
- the user's groups or roles

Attributes in SAML are named using a URI such as
`urn:oid:0.9.2342.19200300.100.1.1` or
`http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn`, and have one or
more values associated with them.

These attribute identifiers vary between IdPs, and most IdPs offer ways to
customise the URIs and their associated value.

{es} uses these attributes to infer information about the user who has
logged in, and they can be used for role mapping (below).

In order for these attributes to be useful, {es} and the IdP need to have a
common via for the names of the attributes. This is done manually, by
configuring the IdP and the {security} SAML realm to use the same URI name for
each logical user attribute.

The recommended steps for configuring these SAML attributes are as follows:

. Consult your IdP to see what user attributes it can provide.
  This varies greatly between providers, but you should be able to obtain a list
  from the documentation, or from your local admin.

. Read through the list of <<saml-user-properties, user properties>> that {es}
  supports, and decide which of them are useful to you, and can be provided by
  your IdP. At a _minimum_, the `principal` attribute is required.

. Configure your IdP to "release" those attributes to your {kib} SAML service
  provider.  This process varies by provider - some will provide a user interface
  for this, while others may require that you edit configuration files.
  Usually the IdP (or your local administrator) will have suggestions about what
  URI to use for each attribute. You can simply accept those suggestions, as the
  {es} service is entirely configurable and does not require that any specific
  URIs are used.

. Configure the SAML realm in {es} to associate the {es} user properties (see
  <<saml-user-properties, the listing>> below), to the URIs that you configured
  in your IdP. In the example above, we have configured the `principal` and
  `groups` attributes.

===== Special Attribute Names

In general, {es} expects that the configured value for an attribute will be a
URI such as `urn:oid:0.9.2342.19200300.100.1.1`, however there are some
additional names that can be used:

`nameid`::
    This uses the SAML `NamedID` value instead of a SAML attribute. SAML
    `NameID` elements are an optional, but frequently provided, field within a
    SAML Assertion that the IdP may use to identify the Subject of that
    Assertion. In some cases the `NameID` will relate to the user's login
    identifier (username) wihin the IdP, but in many cases they will be
    internally generated identifiers that have no obvious meaning outside
    of the IdP.

`nameid:persistent`::
    This uses the SAML `NameID` value, but only if the NameID format is
    `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`.
    A SAML `NameID` element has an optional `Format` attribute that indicates
    the semantics of the provided name.  It is common for IdPs to be configured
    with "transient" NameIDs that present a new identifier for each session.
    Since it is rarely useful to use a transient NameID as part of an attribute
    mapping, the "nameid:persistent" attribute name can be used as a safety
    mechanism that will cause an error if you attempt to map from a `NameID`
    that does not have a persistent value.

_friendlyName_::
    A SAML attribute may have a _friendlyName_ in addition to its URI based name.
    For example the attribute with a name of `urn:oid:0.9.2342.19200300.100.1.1`
    might also have a friendlyName of `uid`.
    You may use these friendly names within an attribute mapping, but it is
    recommended that you use the URI based names, as friendlyNames are neither
    standardized or mandatory.

The example below configures a realm to use a persistent nameid for the principal,
and the attribute with the friendlyName "roles" for the user's groups.

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.saml1:
  type: saml
  order: 2
  idp.metadata.path: saml/idp-metadata.xml
  idp.entity_id: "https://sso.example.com/"
  sp.entity_id:  "https://kibana.example.com/"
  sp.acs: "https://kibana.example.com/api/security/v1/saml"
  attributes.principal: "nameid:persistent"
  attributes.groups: "roles"
------------------------------------------------------------

--

. Configure role mappings.
+
--
When a user authenticates using SAML, they are identified to the Elastic Stack,
but this does not automatically grant them access to perform any actions or
access any data.

Your SAML users cannot do anything until they are mapped to X-Pack Security
roles. This mapping is performed through the
{ref}/security-api-role-mapping.html[role-mapping API]

This is an example of a simple role mapping that grants the `kibana_user` role
to any user who authenticates against the `saml1` realm:

[source,js]
--------------------------------------------------
PUT /_xpack/security/role_mapping/saml-kibana
{
  "roles": [ "kibana_user" ],
  "enabled": true,
  "rules": {
    "field": { "realm.name": "saml1" }
  }
}
--------------------------------------------------
// CONSOLE
// TEST


The attributes that are mapped via the realm configuration are used to process
role mapping rules, and these rules determine which roles a user is granted.

The user fields that are provided to the role
mapping are derived from the SAML attributes as follows:

- `username`: The `principal` attribute
- `dn`: The `dn` attribute
- `groups`: The `groups` attribute
- `metadata`: See <<saml-user-metadata>>

For more information, see <<mapping-roles>> and
{ref}/security-api-role-mapping.html[Role Mapping APIs]. 

If your IdP has the ability to provide groups or roles to Service Providers,
then you should map this SAML attribute to the `attributes.groups` setting in
the {es} realm, and then make use of it in a role mapping as per the example
below.

This mapping grants the {es} `finance_data` role, to any users who authenticate
via the `saml1` realm with the `finance-team` group.

[source,js]
--------------------------------------------------
PUT /_xpack/security/role_mapping/saml-finance
{
  "roles": [ "finance_data" ],
  "enabled": true,
  "rules": { "all": [
        { "field": { "realm.name": "saml1" } },
        { "field": { "groups": "finance-team" } }
  ] }
}
--------------------------------------------------
// CONSOLE
// TEST
--

. (Optional) Generate a SAML Metadata file for use by your Identity Provider. 
+
--
The {stack} Stack uses a standard SAML _metadata_ document in XML format, which 
defines the capabilities and features of your IdP. You should be able to
download or generate such a document within your IdP administration interface.

Download the IdP metadata document and store it within the `config` directory on
each {es} node. For example, store it as `config/saml/idp-metadata.xml`.

The IdP will have been assigned an identifier (_EntityID_ in SAML terminology)
which is most commonly expressed in _Uniform Resource Identifier_ (URI) form.
Your admin interface might tell you what this is or you might need to
read the metadata document to find it. Look for the `entityID` attribute on the
`EntityDescriptor` element.

Most IdPs will provide an appropriate metadata file with all the features that
the {stack} requires. For completeness sake, the minimum requirements that the 
{stack} has for the IdP's metadata are:

- An `<EntityDescriptor>` with an `entityID` that matches the {es}
  <<saml-create-realm, configuration>>
- An `<IDPSSODescriptor>` that supports the SAML 2.0 protocol
  (`urn:oasis:names:tc:SAML:2.0:protocol`).
- At least one `<KeyDescriptor>` that is configured for _signing_ (that is, it
  has `use="signing"` or leaves the `use` unspecified)
- A `<SingleSignOnService>` with binding of HTTP-Redirect
  (`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`)
- If you wish to support <<saml-logout, Single Logout>>, a `<SingleLogoutService>`
  with binding of HTTP-Redirect
  (`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`)

The {stack} requires that all messages from the IdP are signed.
For authentication `<Response>` messages, the signature may be applied to either
the response itself, or to the individual assertions.
For `<LogoutRequest>` messages, the message itself must be signed, and the
signature should be provided as a URL parameter, as required by the HTTP-Redirect
binding.
--
